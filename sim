{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cea89ef7-079a-414f-b732-0a70bd666602",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a message for BB84 simulation:  i love science\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import cirq\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "def simulate_photon(alice_basis, alice_bit, bob_basis):\n",
    "    q = cirq.LineQubit(0)\n",
    "    circuit = cirq.Circuit()\n",
    "    \n",
    "    if alice_basis == 0:\n",
    "        if alice_bit == 1:\n",
    "            circuit.append(cirq.X(q))\n",
    "    else:\n",
    "        if alice_bit == 0:\n",
    "            circuit.append(cirq.H(q))\n",
    "        else:\n",
    "            circuit.append(cirq.X(q))\n",
    "            circuit.append(cirq.H(q))\n",
    "    \n",
    "    if bob_basis == 1:\n",
    "        circuit.append(cirq.H(q))\n",
    "    circuit.append(cirq.measure(q, key='m'))\n",
    "    \n",
    "    sim = cirq.Simulator()\n",
    "    result = sim.run(circuit, repetitions=1)\n",
    "    measurement = int(result.measurements['m'][0][0])\n",
    "    return measurement\n",
    "\n",
    "def string_to_bits(message):\n",
    "    bits = []\n",
    "    for char in message:\n",
    "        ascii_val = ord(char)\n",
    "        for i in range(7, -1, -1):\n",
    "            bits.append((ascii_val >> i) & 1)\n",
    "    return bits\n",
    "\n",
    "def bits_to_string(bits):\n",
    "    chars = []\n",
    "    for i in range(0, len(bits), 8):\n",
    "        byte = bits[i:i+8]\n",
    "        if len(byte) < 8:\n",
    "            break\n",
    "        ascii_val = 0\n",
    "        for b in byte:\n",
    "            ascii_val = (ascii_val << 1) | b\n",
    "        chars.append(chr(ascii_val))\n",
    "    return ''.join(chars)\n",
    "\n",
    "def xor_lists(a, b):\n",
    "    return [x ^ y for x, y in zip(a, b)]\n",
    "\n",
    "def simulate_bb84(message):\n",
    "    message_bits = string_to_bits(message)\n",
    "    required = len(message_bits)\n",
    "    key = []\n",
    "    events = []\n",
    "    photon_count = 0\n",
    "\n",
    "    while len(key) < required:\n",
    "        photon_count += 1\n",
    "        alice_basis = random.choice([0, 1])\n",
    "        alice_bit = random.choice([0, 1])\n",
    "        bob_basis = random.choice([0, 1])\n",
    "        \n",
    "        bob_bit = simulate_photon(alice_basis, alice_bit, bob_basis)\n",
    "        match = (alice_basis == bob_basis)\n",
    "        if match:\n",
    "            key.append(alice_bit)\n",
    "        \n",
    "        events.append({\n",
    "            'photon_number': photon_count,\n",
    "            'alice_basis': alice_basis,\n",
    "            'alice_bit': alice_bit,\n",
    "            'bob_basis': bob_basis,\n",
    "            'bob_bit': bob_bit,\n",
    "            'match': match,\n",
    "            'current_key': key.copy()\n",
    "        })\n",
    "    \n",
    "    key = key[:required]\n",
    "    ciphertext = xor_lists(message_bits, key)\n",
    "    decrypted_bits = xor_lists(ciphertext, key)\n",
    "    decrypted_message = bits_to_string(decrypted_bits)\n",
    "    return events, key, ciphertext, decrypted_message\n",
    "\n",
    "def animate_events(events, final_info, frames_per_event=30):\n",
    "    fig, ax = plt.subplots(figsize=(8, 4))\n",
    "    ax.set_xlim(-2, 2)\n",
    "    ax.set_ylim(-1, 1)\n",
    "    ax.set_title(\"BB84 Quantum Key Distribution Simulation\")\n",
    "    ax.axis('off')\n",
    "    \n",
    "    ax.plot(-1, 0, marker='o', markersize=20, color='blue')\n",
    "    ax.plot(1, 0, marker='o', markersize=20, color='red')\n",
    "    ax.text(-1, 0.7, \"Alice\", ha='center', fontsize=12, color='blue')\n",
    "    ax.text(1, 0.7, \"Bob\", ha='center', fontsize=12, color='red')\n",
    "    \n",
    "    photon_dot, = ax.plot([], [], marker='o', color='green', markersize=10)\n",
    "    info_text = ax.text(0, -0.8, \"\", ha='center', fontsize=10)\n",
    "    \n",
    "    total_frames = len(events) * frames_per_event + frames_per_event\n",
    "\n",
    "    def init():\n",
    "        photon_dot.set_data([], [])\n",
    "        info_text.set_text(\"\")\n",
    "        return photon_dot, info_text\n",
    "\n",
    "    def update(frame):\n",
    "        event_index = frame // frames_per_event\n",
    "        frame_in_event = frame % frames_per_event\n",
    "\n",
    "        if event_index < len(events):\n",
    "            t = frame_in_event / (frames_per_event - 1)\n",
    "            x = -1 + 2 * t\n",
    "            y = 0\n",
    "            photon_dot.set_data(x, y)\n",
    "            event = events[event_index]\n",
    "            info_str = (\n",
    "                f\"Photon {event['photon_number']}\\n\"\n",
    "                f\"Alice: basis={event['alice_basis']}, bit={event['alice_bit']}\\n\"\n",
    "                f\"Bob: basis={event['bob_basis']}, measured={event['bob_bit']}\\n\"\n",
    "                f\"Match: {event['match']}\\n\"\n",
    "                f\"Key so far: {''.join(str(bit) for bit in event['current_key'])}\"\n",
    "            )\n",
    "            info_text.set_text(info_str)\n",
    "        else:\n",
    "            photon_dot.set_data([], [])\n",
    "            final_str = (\n",
    "                f\"Final Key: {final_info['key']}\\n\"\n",
    "                f\"Ciphertext: {final_info['ciphertext']}\\n\"\n",
    "                f\"Bob decrypted: {final_info['decrypted_message']}\"\n",
    "            )\n",
    "            info_text.set_text(final_str)\n",
    "        return photon_dot, info_text\n",
    "\n",
    "    ani = animation.FuncAnimation(fig, update, frames=total_frames, init_func=init,\n",
    "                                  interval=100, blit=False, repeat=False)\n",
    "    \n",
    "    return ani, fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    message = input(\"Enter a message for BB84 simulation: \")\n",
    "    events, key, ciphertext, decrypted_message = simulate_bb84(message)\n",
    "    \n",
    "    final_info = {\n",
    "        'key': ''.join(str(b) for b in key),\n",
    "        'ciphertext': ''.join(str(b) for b in ciphertext),\n",
    "        'decrypted_message': decrypted_message\n",
    "    }\n",
    "    \n",
    "    ani, fig = animate_events(events, final_info)\n",
    "    Writer = animation.writers['ffmpeg']\n",
    "    writer = Writer(fps=10, metadata=dict(artist='BB84 Simulation'), bitrate=1800)\n",
    "    ani.save('bb84_simulation.mp4', writer=writer)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e99ab417-fedf-402c-87e5-dbf42d15e6d6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
